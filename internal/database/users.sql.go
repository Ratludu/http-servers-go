// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, hashed_passwords)
VALUES (
	$1,
	$2
	)
RETURNING id, created_at, updated_at, email, hashed_passwords, is_chirpy_red
`

type CreateUserParams struct {
	Email           string
	HashedPasswords string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPasswords)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPasswords,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const findUserFromEmail = `-- name: FindUserFromEmail :one
SELECT id, created_at, updated_at, email, hashed_passwords, is_chirpy_red FROM users WHERE email = $1
`

func (q *Queries) FindUserFromEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserFromEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPasswords,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET email = $1, hashed_passwords = $2,updated_at = NOW() 
WHERE id = $3
RETURNING id, created_at, updated_at, email, hashed_passwords, is_chirpy_red
`

type UpdateUserParams struct {
	Email           string
	HashedPasswords string
	ID              uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.HashedPasswords, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPasswords,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeUser = `-- name: UpgradeUser :one
UPDATE users
SET is_chirpy_red = TRUE
WHERE id = $1
RETURNING id, created_at, updated_at, email, hashed_passwords, is_chirpy_red
`

func (q *Queries) UpgradeUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, upgradeUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPasswords,
		&i.IsChirpyRed,
	)
	return i, err
}
